# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _usbtc08
else:
    import _usbtc08

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class floatArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _usbtc08.floatArray_swiginit(self, _usbtc08.new_floatArray(nelements))
    __swig_destroy__ = _usbtc08.delete_floatArray

    def __getitem__(self, index):
        return _usbtc08.floatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _usbtc08.floatArray___setitem__(self, index, value)

    def cast(self):
        return _usbtc08.floatArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _usbtc08.floatArray_frompointer(t)

# Register floatArray in _usbtc08:
_usbtc08.floatArray_swigregister(floatArray)
class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _usbtc08.intArray_swiginit(self, _usbtc08.new_intArray(nelements))
    __swig_destroy__ = _usbtc08.delete_intArray

    def __getitem__(self, index):
        return _usbtc08.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _usbtc08.intArray___setitem__(self, index, value)

    def cast(self):
        return _usbtc08.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _usbtc08.intArray_frompointer(t)

# Register intArray in _usbtc08:
_usbtc08.intArray_swigregister(intArray)
class shortArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _usbtc08.shortArray_swiginit(self, _usbtc08.new_shortArray(nelements))
    __swig_destroy__ = _usbtc08.delete_shortArray

    def __getitem__(self, index):
        return _usbtc08.shortArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _usbtc08.shortArray___setitem__(self, index, value)

    def cast(self):
        return _usbtc08.shortArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _usbtc08.shortArray_frompointer(t)

# Register shortArray in _usbtc08:
_usbtc08.shortArray_swigregister(shortArray)
class charArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _usbtc08.charArray_swiginit(self, _usbtc08.new_charArray(nelements))
    __swig_destroy__ = _usbtc08.delete_charArray

    def __getitem__(self, index):
        return _usbtc08.charArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _usbtc08.charArray___setitem__(self, index, value)

    def cast(self):
        return _usbtc08.charArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _usbtc08.charArray_frompointer(t)

# Register charArray in _usbtc08:
_usbtc08.charArray_swigregister(charArray)

def usb_tc08_open_unit_progress():
    return _usbtc08.usb_tc08_open_unit_progress()

def usb_tc08_get_unit_info(handle, OUTPUT):
    return _usbtc08.usb_tc08_get_unit_info(handle, OUTPUT)
USBTC08_MAX_FILTER_SIZE = _usbtc08.USBTC08_MAX_FILTER_SIZE
USBTC08_MAX_SAMPLE_BUFFER = _usbtc08.USBTC08_MAX_SAMPLE_BUFFER
USBTC08_MAX_INFO_CHARS = _usbtc08.USBTC08_MAX_INFO_CHARS
USBTC08_MAX_DATE_CHARS = _usbtc08.USBTC08_MAX_DATE_CHARS
USBTC08_MAX_SERIAL_CHARS = _usbtc08.USBTC08_MAX_SERIAL_CHARS
USBTC08_MAX_VERSION_CHARS = _usbtc08.USBTC08_MAX_VERSION_CHARS
USBTC08_CHANNEL_CJC = _usbtc08.USBTC08_CHANNEL_CJC
USBTC08_CHANNEL_1 = _usbtc08.USBTC08_CHANNEL_1
USBTC08_CHANNEL_2 = _usbtc08.USBTC08_CHANNEL_2
USBTC08_CHANNEL_3 = _usbtc08.USBTC08_CHANNEL_3
USBTC08_CHANNEL_4 = _usbtc08.USBTC08_CHANNEL_4
USBTC08_CHANNEL_5 = _usbtc08.USBTC08_CHANNEL_5
USBTC08_CHANNEL_6 = _usbtc08.USBTC08_CHANNEL_6
USBTC08_CHANNEL_7 = _usbtc08.USBTC08_CHANNEL_7
USBTC08_CHANNEL_8 = _usbtc08.USBTC08_CHANNEL_8
USBTC08_MAX_CHANNELS = _usbtc08.USBTC08_MAX_CHANNELS
USBTC08_PROGRESS_FAIL = _usbtc08.USBTC08_PROGRESS_FAIL
USBTC08_PROGRESS_PENDING = _usbtc08.USBTC08_PROGRESS_PENDING
USBTC08_PROGRESS_COMPLETE = _usbtc08.USBTC08_PROGRESS_COMPLETE
USBTC08_ERROR_OK = _usbtc08.USBTC08_ERROR_OK
USBTC08_ERROR_OS_NOT_SUPPORTED = _usbtc08.USBTC08_ERROR_OS_NOT_SUPPORTED
USBTC08_ERROR_NO_CHANNELS_SET = _usbtc08.USBTC08_ERROR_NO_CHANNELS_SET
USBTC08_ERROR_INVALID_PARAMETER = _usbtc08.USBTC08_ERROR_INVALID_PARAMETER
USBTC08_ERROR_VARIANT_NOT_SUPPORTED = _usbtc08.USBTC08_ERROR_VARIANT_NOT_SUPPORTED
USBTC08_ERROR_INCORRECT_MODE = _usbtc08.USBTC08_ERROR_INCORRECT_MODE
USBTC08_ERROR_ENUMERATION_INCOMPLETE = _usbtc08.USBTC08_ERROR_ENUMERATION_INCOMPLETE
USBTC08_ERROR_NOT_RESPONDING = _usbtc08.USBTC08_ERROR_NOT_RESPONDING
USBTC08_ERROR_FW_FAIL = _usbtc08.USBTC08_ERROR_FW_FAIL
USBTC08_ERROR_CONFIG_FAIL = _usbtc08.USBTC08_ERROR_CONFIG_FAIL
USBTC08_ERROR_NOT_FOUND = _usbtc08.USBTC08_ERROR_NOT_FOUND
USBTC08_ERROR_THREAD_FAIL = _usbtc08.USBTC08_ERROR_THREAD_FAIL
USBTC08_ERROR_PIPE_INFO_FAIL = _usbtc08.USBTC08_ERROR_PIPE_INFO_FAIL
USBTC08_ERROR_NOT_CALIBRATED = _usbtc08.USBTC08_ERROR_NOT_CALIBRATED
USBTC08_EROOR_PICOPP_TOO_OLD = _usbtc08.USBTC08_EROOR_PICOPP_TOO_OLD
USBTC08_ERROR_PICOPP_TOO_OLD = _usbtc08.USBTC08_ERROR_PICOPP_TOO_OLD
USBTC08_ERROR_PICO_DRIVER_FUNCTION = _usbtc08.USBTC08_ERROR_PICO_DRIVER_FUNCTION
USBTC08_ERROR_COMMUNICATION = _usbtc08.USBTC08_ERROR_COMMUNICATION
USBTC08_UNITS_CENTIGRADE = _usbtc08.USBTC08_UNITS_CENTIGRADE
USBTC08_UNITS_FAHRENHEIT = _usbtc08.USBTC08_UNITS_FAHRENHEIT
USBTC08_UNITS_KELVIN = _usbtc08.USBTC08_UNITS_KELVIN
USBTC08_UNITS_RANKINE = _usbtc08.USBTC08_UNITS_RANKINE
USBTC08_MAX_UNITS = _usbtc08.USBTC08_MAX_UNITS
USBTC08LINE_DRIVER_VERSION = _usbtc08.USBTC08LINE_DRIVER_VERSION
USBTC08LINE_KERNEL_DRIVER_VERSION = _usbtc08.USBTC08LINE_KERNEL_DRIVER_VERSION
USBTC08LINE_HARDWARE_VERSION = _usbtc08.USBTC08LINE_HARDWARE_VERSION
USBTC08LINE_VARIANT_INFO = _usbtc08.USBTC08LINE_VARIANT_INFO
USBTC08LINE_BATCH_AND_SERIAL = _usbtc08.USBTC08LINE_BATCH_AND_SERIAL
USBTC08LINE_CAL_DATE = _usbtc08.USBTC08LINE_CAL_DATE
USBTC08LINE_DRIVER_PATH = _usbtc08.USBTC08LINE_DRIVER_PATH
class USBTC08_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_usbtc08.USBTC08_INFO_size_get, _usbtc08.USBTC08_INFO_size_set)
    DriverVersion = property(_usbtc08.USBTC08_INFO_DriverVersion_get, _usbtc08.USBTC08_INFO_DriverVersion_set)
    PicoppVersion = property(_usbtc08.USBTC08_INFO_PicoppVersion_get, _usbtc08.USBTC08_INFO_PicoppVersion_set)
    HardwareVersion = property(_usbtc08.USBTC08_INFO_HardwareVersion_get, _usbtc08.USBTC08_INFO_HardwareVersion_set)
    Variant = property(_usbtc08.USBTC08_INFO_Variant_get, _usbtc08.USBTC08_INFO_Variant_set)
    szSerial = property(_usbtc08.USBTC08_INFO_szSerial_get, _usbtc08.USBTC08_INFO_szSerial_set)
    szCalDate = property(_usbtc08.USBTC08_INFO_szCalDate_get, _usbtc08.USBTC08_INFO_szCalDate_set)

    def __init__(self):
        _usbtc08.USBTC08_INFO_swiginit(self, _usbtc08.new_USBTC08_INFO())
    __swig_destroy__ = _usbtc08.delete_USBTC08_INFO

# Register USBTC08_INFO in _usbtc08:
_usbtc08.USBTC08_INFO_swigregister(USBTC08_INFO)

def usb_tc08_set_channel(handle, channel, tc_type):
    return _usbtc08.usb_tc08_set_channel(handle, channel, tc_type)

def usb_tc08_run(handle, interval_ms):
    return _usbtc08.usb_tc08_run(handle, interval_ms)

def usb_tc08_get_temp(handle, temp_buffer, times_ms_buffer, buffer_length, overflow, channel, units, fill_missing):
    return _usbtc08.usb_tc08_get_temp(handle, temp_buffer, times_ms_buffer, buffer_length, overflow, channel, units, fill_missing)

def usb_tc08_get_temp_deskew(handle, temp_buffer, times_ms_buffer, buffer_length, overflow, channel, units, fill_missing):
    return _usbtc08.usb_tc08_get_temp_deskew(handle, temp_buffer, times_ms_buffer, buffer_length, overflow, channel, units, fill_missing)

def usb_tc08_get_single(handle, temp, overflow_flags, units):
    return _usbtc08.usb_tc08_get_single(handle, temp, overflow_flags, units)

def usb_tc08_open_unit():
    return _usbtc08.usb_tc08_open_unit()

def usb_tc08_open_unit_async():
    return _usbtc08.usb_tc08_open_unit_async()

def usb_tc08_close_unit(handle):
    return _usbtc08.usb_tc08_close_unit(handle)

def usb_tc08_stop(handle):
    return _usbtc08.usb_tc08_stop(handle)

def usb_tc08_set_mains(handle, sixty_hertz):
    return _usbtc08.usb_tc08_set_mains(handle, sixty_hertz)

def usb_tc08_get_minimum_interval_ms(handle):
    return _usbtc08.usb_tc08_get_minimum_interval_ms(handle)

def usb_tc08_get_unit_info2(handle, string, string_length, line):
    return _usbtc08.usb_tc08_get_unit_info2(handle, string, string_length, line)

def usb_tc08_get_formatted_info(handle, unit_info, string_length):
    return _usbtc08.usb_tc08_get_formatted_info(handle, unit_info, string_length)

def usb_tc08_get_last_error(handle):
    return _usbtc08.usb_tc08_get_last_error(handle)
CHANNELS_PER_TC08 = _usbtc08.CHANNELS_PER_TC08
MAX_TC08_UNITS = _usbtc08.MAX_TC08_UNITS

def usb_tc08_legacy_run(handle):
    return _usbtc08.usb_tc08_legacy_run(handle)

def usb_tc08_legacy_set_channel(handle, channel, tc_type, filter_factor, offset, slope):
    return _usbtc08.usb_tc08_legacy_set_channel(handle, channel, tc_type, filter_factor, offset, slope)

def usb_tc08_legacy_get_temp(temp, handle, channel, filtered):
    return _usbtc08.usb_tc08_legacy_get_temp(temp, handle, channel, filtered)

def usb_tc08_legacy_get_cold_junction(temp, handle):
    return _usbtc08.usb_tc08_legacy_get_cold_junction(temp, handle)

def usb_tc08_legacy_get_driver_version():
    return _usbtc08.usb_tc08_legacy_get_driver_version()

def usb_tc08_legacy_get_version(version, handle):
    return _usbtc08.usb_tc08_legacy_get_version(version, handle)

def usb_tc08_legacy_get_cycle(cycle, handle):
    return _usbtc08.usb_tc08_legacy_get_cycle(cycle, handle)
sizeof_USBTC08_INFO = _usbtc08.sizeof_USBTC08_INFO

